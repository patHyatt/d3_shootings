<html>

<head>
    <style>
    path {
        fill: red;
        /*no data*/
        stroke: #888;
        stroke-linejoin: round;
    }
    
    .d0 {
        fill: rgb(210, 255, 255);
    }
    
    .d1 {
        fill: rgb(222, 235, 247);
    }
    
    .d2 {
        fill: rgb(198, 219, 239);
    }
    
    .d3 {
        fill: rgb(158, 202, 225);
    }
    
    .d4 {
        fill: rgb(107, 174, 214);
    }
    
    .d5 {
        fill: rgb(66, 146, 198);
    }
    
    .d6 {
        fill: rgb(33, 113, 181);
    }
    
    .d7 {
        fill: rgb(8, 81, 156);
    }
    
    .d8 {
        fill: rgb(8, 48, 107);
    }
    
    .d9 {
        fill: blue;
    }
    </style>
</head>

<body>
    <label for="year">Select year to display</label>
    <select id="year">
    </select>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/topojson/1.6.19/topojson.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/queue-async/1.0.7/queue.min.js"></script>
<script type="text/javascript">
var yearsAvailable = [
    "2013",
    "2014",
    "2015",
];

var select = d3.select("#year");

select.selectAll("option")
    .data(yearsAvailable)
    .enter()
    .append("option")
    .attr("value", function(d) {
        return d;
    }).text(function(d) {
        return d;
    });

select.on('change', function() {
    changeYear(select.node().value);
});

function changeYear(year) {
    var q = queue(2);
    q.defer(d3.csv, "data/" + year + ".csv");
    q.defer(d3.json, "data/us-population-by-state-" + year + ".json");
    q.await(function(error, stats, pop) {
        updateForYear(stats, pop);
    });
}

var width = 1280,
    height = 768;

var quantize = d3.scale.quantize()
    .domain([0, 1, 2, 3, 5, 8, 10, 15, 20, 30, 50])
    .range(d3.range(10).map(function(i) {
        return "d" + i;
    }));

var projection = d3.geo.albersUsa()
    .scale(width)
    .translate([width / 2, height / 2]);

var path = d3.geo.path()
    .projection(projection);

var svg = d3.select("body")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

queue()
    .defer(d3.json, "data/us.json")
    .defer(d3.tsv, "data/us-state-names.tsv")
    .await(initalize);

var features;

function initalize(error, us, names) {
    if (error) {
        console.error(error);
        return;
    }

    features = topojson.feature(us, us.objects.states).features;

    //merge names set (w/ state abbreivations) to US set
    features.forEach(function(g) {
        var result = names.filter(function(d) {
            return +d.id === g.id;
        });
        g.name = (result[0] !== undefined) ? result[0].code : null;
    });

    changeYear(2013);
    reload();
}

function updateForYear(stats, pop) {
    //merge CSV set to US set
    features.forEach(function(g) {
        g.killed = 0;
        g.wounded = 0;
        g.population = 0;

        var results = stats.filter(function(d) {
            var state = d.location.substr(d.location.length - 2, 2).trim().toUpperCase();
            return g.name == state;
        });
        g.killed += d3.sum(results, function(d) {
            return +d.killed;
        });
        g.wounded += d3.sum(results, function(d) {
            return +d.wounded;
        });

        var population = pop.filter(function(arr) {
            return g.id == +arr[2];
        });
        g.population = !population[0] ? 0 : +population[0][0];
    });
    reload();
}

function reload() {
    var paths = svg.selectAll("path")
        .data(features);
    paths
        .enter()
        .append("path");

    paths.attr("d", path);
    paths.attr("data-killed", function(d) {
        return d.killed;
    });
    paths.attr("data-wounded", function(d) {
        return d.wounded;
    });
    paths.attr("data-pop", function(d) {
        return d.population;
    });
    paths.attr("class", function(d) {
        return quantize(d.killed / d.population);
    });
    paths.append("text")
        .text(function(d) {
            return d.name;
        });
}
</script>

</html>
